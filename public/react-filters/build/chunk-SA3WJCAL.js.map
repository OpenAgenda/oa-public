{"version":3,"sources":["../src/components/filters/ChoiceFilter.js"],"sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\nimport { Field, useField } from 'react-final-form';\nimport { useUIDSeed } from 'react-uid';\nimport { useIntl } from 'react-intl';\nimport usePreviousModule from 'react-use/lib/usePrevious.js';\nimport { css } from '@emotion/react';\nimport ChoiceField from '../fields/ChoiceField.js';\nimport Title from '../Title.js';\nimport Panel from '../Panel.js';\nimport FilterPreviewer from '../FilterPreviewer.js';\nimport useChoiceState from '../../hooks/useChoiceState.js';\nimport messages from '../../messages/choiceFilter.js';\n\nconst usePrevious = usePreviousModule.default || usePreviousModule;\n\nconst subscription = { value: true };\n\nfunction parseValue(value) {\n  if (Array.isArray(value) && !value.length) {\n    return undefined;\n  }\n\n  return value;\n}\n\nfunction formatValue(value) {\n  // if (value !== undefined) {\n  //   return [].concat(value);\n  // }\n\n  return value;\n}\n\nfunction Preview({\n  name,\n  filter,\n  getOptions,\n  component = FilterPreviewer,\n  disabled,\n  ...rest\n}) {\n  const intl = useIntl();\n  const { input } = useField(name, { subscription });\n  const options = useMemo(() => getOptions(filter), [filter, getOptions]);\n\n  const valueOptions = useMemo(() => {\n    if ([undefined, null, ''].includes(input?.value)) {\n      return [];\n    }\n\n    if (!options.length) {\n      return [];\n    }\n\n    return [].concat(input.value).map(\n      (v) =>\n        options.find((option) => option.value === v) ?? {\n          value: v,\n          label: intl.formatMessage(messages.unrecognizedOption, { value: v }),\n        },\n    );\n  }, [input.value, options, intl]);\n\n  const onRemove = useCallback(\n    (option) => (e) => {\n      e.stopPropagation();\n\n      if (disabled) {\n        return;\n      }\n\n      // radio value is not an array\n      if (!Array.isArray(input.value)) {\n        input.onChange(undefined);\n        return;\n      }\n\n      const newValue = input.value.filter((v) => v !== option.value);\n\n      input.onChange(newValue.length ? newValue : undefined);\n    },\n    [input, disabled],\n  );\n\n  if (!valueOptions?.length) {\n    return null;\n  }\n\n  return React.createElement(component, {\n    name,\n    filter,\n    getOptions,\n    valueOptions,\n    onRemove,\n    disabled,\n    ...rest,\n  });\n}\n\nconst ChoiceFilter = React.forwardRef(function ChoiceFilter(\n  {\n    name,\n    filter,\n    getTotal,\n    searchPlaceholder,\n    searchAriaLabel,\n    getOptions,\n    disabled,\n    collapsed,\n    inputType = 'checkbox',\n    pageSize = 10,\n    searchMinSize = 2 * pageSize,\n    sort,\n    tag,\n    preventDefault,\n  },\n  _ref,\n) {\n  const intl = useIntl();\n  const seed = useUIDSeed();\n\n  const {\n    options,\n    searchValue,\n    onSearchChange,\n    foundOptions,\n    countOptions,\n    hasMoreOptions,\n    moreOptions,\n    lessOptions,\n  } = useChoiceState({\n    filter,\n    getOptions,\n    collapsed,\n    pageSize,\n    sort,\n  });\n\n  // Focus on new option\n  const newOptionRef = useRef(null);\n  const previousCountOptions = usePrevious(countOptions);\n  useEffect(() => {\n    if (\n      newOptionRef.current\n      && countOptions !== previousCountOptions\n      && countOptions - pageSize === previousCountOptions\n    ) {\n      newOptionRef.current.focus();\n    }\n  }, [countOptions, previousCountOptions]);\n\n  return (\n    <>\n      {options.length > searchMinSize ? (\n        <input\n          className=\"form-control input-sm margin-top-xs\"\n          value={searchValue}\n          onChange={onSearchChange}\n          placeholder={\n            searchPlaceholder || intl.formatMessage(messages.searchPlaceholder)\n          }\n          aria-label={searchAriaLabel}\n          title={searchAriaLabel}\n          css={css`\n            width: 50%;\n          `}\n        />\n      ) : null}\n\n      {foundOptions.length === 0 ? (\n        <div className=\"text-muted margin-v-xs\">\n          {intl.formatMessage(messages.noResult)}\n        </div>\n      ) : null}\n\n      {foundOptions.map((option, index) =>\n        (index < countOptions ? (\n          <Field\n            key={seed(option)}\n            name={name}\n            subscription={subscription}\n            parse={parseValue}\n            format={formatValue}\n            component={ChoiceField}\n            type={inputType}\n            value={option.value}\n            option={option}\n            filter={filter}\n            getTotal={getTotal}\n            disabled={disabled}\n            tag={tag}\n            preventDefault={preventDefault}\n            ref={index === countOptions - pageSize ? newOptionRef : null}\n          />\n        ) : null))}\n\n      {hasMoreOptions ? (\n        <button\n          type=\"button\"\n          className=\"btn btn-link btn-link-inline\"\n          onClick={moreOptions}\n        >\n          {intl.formatMessage(messages.moreOptions)}\n        </button>\n      ) : null}\n\n      {!hasMoreOptions && countOptions > pageSize ? (\n        <button\n          type=\"button\"\n          className=\"btn btn-link btn-link-inline\"\n          onClick={lessOptions}\n        >\n          {intl.formatMessage(messages.lessOptions)}\n        </button>\n      ) : null}\n    </>\n  );\n});\n\nconst Collapsable = React.forwardRef(function Collapsable(\n  { name, filter, component, getTotal, getOptions, disabled, ...rest },\n  ref,\n) {\n  const [collapsed, setCollapsed] = useState(filter.defaultCollapsed ?? true);\n\n  return (\n    <Panel\n      header={(\n        <Title\n          name={name}\n          filter={filter}\n          component={Preview}\n          getOptions={getOptions}\n          disabled={disabled}\n        />\n      )}\n      collapsed={collapsed}\n      setCollapsed={setCollapsed}\n    >\n      <ChoiceFilter\n        ref={ref}\n        name={name}\n        filter={filter}\n        component={component}\n        getTotal={getTotal}\n        getOptions={getOptions}\n        disabled={disabled}\n        collapsed={collapsed}\n        {...rest}\n      />\n    </Panel>\n  );\n});\n\nconst exported = React.memo(ChoiceFilter);\n\n// React.memo lose statics\nexported.Preview = Preview;\nexported.Collapsable = Collapsable;\n\nexport default exported;\n"],"mappings":"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","names":["ChoiceFilter","Collapsable"]}