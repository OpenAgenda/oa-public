{"version":3,"sources":["../src/hooks/useGetFilterOptions.js"],"sourcesContent":["import get from 'lodash/get.js';\nimport { useCallback } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { getLocaleValue } from '@openagenda/intl';\n\nconst messages = defineMessages({\n  emptyOption: {\n    id: 'ReactFilters.useGetFilterOptions.emptyOption',\n    defaultMessage: '(Without value)',\n  },\n});\n\nexport default function useGetFilterOptions(intl, filtersBase, aggregations) {\n  return useCallback(\n    (filter) => {\n      const missingLabel = intl.formatMessage(messages.emptyOption);\n\n      if (filter.options) {\n        const missingOption = filter.missingValue\n          ? filtersBase?.[filter.name]?.find((v) => {\n            const dataKey = 'id' in v ? 'id' : 'key';\n            return v[dataKey] === filter.missingValue;\n          })\n          : null;\n\n        return missingOption\n          ? [\n            {\n              label: missingLabel,\n              key: filter.missingValue,\n              value: filter.missingValue,\n            },\n          ].concat(filter.options)\n          : filter.options;\n      }\n\n      if (!filtersBase?.[filter.name]) return [];\n\n      const baseAgg = [...filtersBase[filter.name]];\n\n      const aggregation = aggregations[filter.name];\n\n      if (aggregation) {\n        aggregation.forEach((entry) => {\n          const dataKey = 'id' in entry ? 'id' : 'key';\n          const found = baseAgg.find((v) => v[dataKey] === entry[dataKey]);\n          if (!found) baseAgg.push(entry);\n        });\n      }\n\n      const labelKey = filter.labelKey || 'key';\n\n      return baseAgg.map((entry) => {\n        const dataKey = 'id' in entry ? 'id' : 'key';\n        const labelValue = get(entry, labelKey);\n\n        return {\n          ...entry,\n          label:\n            labelValue === filter.missingValue\n              ? missingLabel\n              : getLocaleValue(labelValue, intl.locale),\n          value: String(entry[dataKey]),\n        };\n      });\n    },\n    [intl, aggregations, filtersBase],\n  );\n}\n"],"mappings":";AAAA,OAAO,SAAS;AAChB,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAE/B,IAAM,WAAW,eAAe;AAAA,EAC9B,aAAa;AAAA,IACX,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB;AACF,CAAC;AAEc,SAAR,oBAAqC,MAAM,aAAa,cAAc;AAC3E,SAAO;AAAA,IACL,CAAC,WAAW;AAdhB;AAeM,YAAM,eAAe,KAAK,cAAc,SAAS,WAAW;AAE5D,UAAI,OAAO,SAAS;AAClB,cAAM,gBAAgB,OAAO,gBACzB,gDAAc,OAAO,UAArB,mBAA4B,KAAK,CAAC,MAAM;AACxC,gBAAM,UAAU,QAAQ,IAAI,OAAO;AACnC,iBAAO,EAAE,OAAO,MAAM,OAAO;AAAA,QAC/B,KACE;AAEJ,eAAO,gBACH;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,KAAK,OAAO;AAAA,YACZ,OAAO,OAAO;AAAA,UAChB;AAAA,QACF,EAAE,OAAO,OAAO,OAAO,IACrB,OAAO;AAAA,MACb;AAEA,UAAI,EAAC,2CAAc,OAAO,OAAO,QAAO,CAAC;AAEzC,YAAM,UAAU,CAAC,GAAG,YAAY,OAAO,IAAI,CAAC;AAE5C,YAAM,cAAc,aAAa,OAAO,IAAI;AAE5C,UAAI,aAAa;AACf,oBAAY,QAAQ,CAAC,UAAU;AAC7B,gBAAM,UAAU,QAAQ,QAAQ,OAAO;AACvC,gBAAM,QAAQ,QAAQ,KAAK,CAAC,MAAM,EAAE,OAAO,MAAM,MAAM,OAAO,CAAC;AAC/D,cAAI,CAAC,MAAO,SAAQ,KAAK,KAAK;AAAA,QAChC,CAAC;AAAA,MACH;AAEA,YAAM,WAAW,OAAO,YAAY;AAEpC,aAAO,QAAQ,IAAI,CAAC,UAAU;AAC5B,cAAM,UAAU,QAAQ,QAAQ,OAAO;AACvC,cAAM,aAAa,IAAI,OAAO,QAAQ;AAEtC,eAAO;AAAA,UACL,GAAG;AAAA,UACH,OACE,eAAe,OAAO,eAClB,eACA,eAAe,YAAY,KAAK,MAAM;AAAA,UAC5C,OAAO,OAAO,MAAM,OAAO,CAAC;AAAA,QAC9B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,CAAC,MAAM,cAAc,WAAW;AAAA,EAClC;AACF;","names":[]}