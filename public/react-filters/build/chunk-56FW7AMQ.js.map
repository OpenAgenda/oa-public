{"version":3,"sources":["../src/components/FiltersManager.js"],"sourcesContent":["import omit from 'lodash/omit.js';\nimport isEqual from 'lodash/isEqual.js';\nimport qs from 'qs';\nimport React, {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { unstable_batchedUpdates as unstableBatchedUpdates } from 'react-dom';\nimport { useIntl } from 'react-intl';\nimport { useForm } from 'react-final-form';\nimport { useUIDSeed } from 'react-uid';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query';\nimport { Portal } from '@openagenda/react-portal-ssr';\nimport useConstant from '@openagenda/react-shared/dist/hooks/useConstant.js';\nimport { getEvents } from '../api/index.js';\nimport {\n  filtersToAggregations,\n  extractFiltersFromDom,\n  extractWidgetsFromDom,\n  withDefaultFilterConfig,\n} from '../utils/index.js';\nimport {\n  useGetFilterOptions,\n  useGetTotal,\n  useLoadGeoData,\n} from '../hooks/index.js';\nimport FiltersAndWidgetsContext from '../contexts/FiltersAndWidgetsContext.js';\nimport Filters from './Filters.js';\nimport ActiveFilters from './ActiveFilters.js';\nimport FavoriteToggle from './FavoriteToggle.js';\nimport Total from './Total.js';\nimport ChoiceFilter from './filters/ChoiceFilter.js';\nimport DateRangeFilter from './filters/DateRangeFilter.js';\nimport SimpleDateRangeFilter from './filters/SimpleDateRangeFilter.js';\nimport DefinedRangeFilter from './filters/DefinedRangeFilter.js';\nimport NumberRangeFilter from './filters/NumberRangeFilter.js';\nimport SearchFilter from './filters/SearchFilter.js';\nimport MapFilter from './filters/MapFilter.js';\nimport CustomFilter from './filters/CustomFilter.js';\nimport FavoritesFilter from './filters/FavoritesFilter.js';\nimport TimelineFilter from './filters/TimelineFilter.js';\n\nconst FiltersManager = React.forwardRef(function FiltersManager(\n  {\n    aggregations: initialAggregations = {},\n    query: initialQuery = {},\n    total: initialTotal = 0,\n    defaultViewport,\n    filtersBase: initialFiltersBase,\n    agendaUid,\n    onLoad,\n\n    choiceComponent = ChoiceFilter,\n    dateRangeComponent = DateRangeFilter,\n    simpleDateRangeComponent = SimpleDateRangeFilter,\n    definedRangeComponent = DefinedRangeFilter,\n    numberRangeComponent = NumberRangeFilter,\n    searchComponent = SearchFilter,\n    mapComponent = MapFilter,\n    customComponent = CustomFilter,\n    favoritesComponent = FavoritesFilter,\n    timelineComponent = TimelineFilter,\n\n    ...rest\n  },\n  ref,\n) {\n  const intl = useIntl();\n  const form = useForm();\n  const widgetSeed = useUIDSeed();\n\n  const {\n    filters,\n    widgets,\n    setFilters,\n    setWidgets,\n    filtersOptions,\n    searchMethod,\n  } = useContext(FiltersAndWidgetsContext);\n\n  const [total, setTotal] = useState(() => initialTotal);\n  const [aggregations, setAggregations] = useState(() => initialAggregations);\n\n  const filtersBaseQuery = useQuery(\n    ['react-filters', 'filtersBase', agendaUid],\n    async () => {\n      const filtersToLoad = filters.filter(\n        (filter) => filter.type === 'choice' && !filter.options,\n      );\n\n      if (!filtersToLoad.length) {\n        return {};\n      }\n\n      return (\n        await getEvents(\n          null, // apiClient\n          filtersOptions.res,\n          { uid: agendaUid },\n          filters.filter(\n            (filter) => filter.type === 'choice' && !filter.options,\n          ),\n          { size: 0 },\n          null, // pageParam\n          false, // filtersBase\n          0,\n          searchMethod,\n        )\n      ).aggregations;\n    },\n    {\n      initialData: initialFiltersBase,\n      staleTime: 1000,\n      notifyOnChangeProps: ['data', 'isLoading', 'error'],\n    },\n  );\n\n  const getOptions = useGetFilterOptions(\n    intl,\n    filtersBaseQuery.data,\n    aggregations,\n  );\n  const getTotal = useGetTotal(aggregations);\n\n  const getQuery = useCallback(() => form.getSubmittedValues(), [form]);\n  const loadGeoData = useLoadGeoData(\n    null,\n    filtersOptions.res,\n    () => form.getSubmittedValues(),\n    { searchMethod },\n  );\n\n  useImperativeHandle(ref, () => ({\n    getFilters: () => filters,\n    getForm: () => form,\n    setAggregations,\n    setTotal,\n    updateFiltersAndWidgets: (values, result) => {\n      const widgetsOnPage = extractWidgetsFromDom();\n      const filtersOnPage = extractFiltersFromDom();\n\n      const newFilters = filtersOnPage.map((nextFilter) => {\n        const completedNext = withDefaultFilterConfig(\n          nextFilter,\n          intl,\n          filtersOptions,\n        );\n        const found = filters.find(\n          (v) =>\n            JSON.stringify(omit(v, 'elemRef'))\n            === JSON.stringify(omit(completedNext, 'elemRef')),\n        );\n\n        // Conserve if found & elem has not changed\n        return found && document.body.contains(found.elem)\n          ? found\n          : completedNext;\n      });\n\n      const newWidgets = widgetsOnPage.map((nextWidget) => {\n        const found = widgets.find(\n          (v) =>\n            JSON.stringify(omit(v, 'elemRef'))\n            === JSON.stringify(omit(nextWidget, 'elemRef')),\n        );\n\n        // Conserve if found & elem has not changed\n        return found && document.body.contains(found.elem) ? found : nextWidget;\n      });\n\n      // Because re-render filters separatly to widgets throws an error\n      unstableBatchedUpdates(() => {\n        if (!isEqual(filters, newFilters)) {\n          setFilters(newFilters);\n        }\n\n        if (!isEqual(widgets, newWidgets)) {\n          setWidgets(newWidgets);\n        }\n\n        setAggregations(result.aggregations || {});\n        setTotal(result.total || 0);\n      });\n\n      const mapFilter = filters.find((v) => v.type === 'map');\n      const mapElem = mapFilter?.elemRef?.current;\n      const viewport = result.aggregations?.viewport;\n\n      if (mapElem && viewport) {\n        mapElem.onQueryChange(viewport);\n      }\n\n      const timingsFilter = filters.find((v) => v.name === 'timings');\n      const timingsElem = timingsFilter?.elemRef?.current;\n\n      if (timingsElem) {\n        timingsElem.onQueryChange();\n      }\n    },\n    updateLocation: (values) => {\n      const queryStr = qs.stringify(values, {\n        addQueryPrefix: true,\n        skipNulls: true,\n      });\n\n      window.history.pushState(\n        {},\n        null,\n        `${window.location.pathname}${queryStr}`,\n      );\n    },\n  }));\n\n  useEffect(() => {\n    if (typeof onLoad === 'function') {\n      const aggs = filtersToAggregations(filters);\n\n      onLoad(initialQuery, aggs, form);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const widgetElems = widgets.map((widget) => {\n    switch (widget.name) {\n      case 'total':\n        return (\n          <Portal key={widgetSeed(widget)} selector={widget.destSelector}>\n            <span>\n              <Total total={total} {...widget} />\n            </span>\n          </Portal>\n        );\n      case 'activeFilters':\n        return (\n          <Portal key={widgetSeed(widget)} selector={widget.destSelector}>\n            <span>\n              <ActiveFilters\n                agendaUid={agendaUid}\n                filters={filters}\n                getOptions={getOptions}\n              />\n            </span>\n          </Portal>\n        );\n      case 'favorite':\n        return (\n          <Portal key={widgetSeed(widget)} selector={widget.destSelector}>\n            <span>\n              <FavoriteToggle\n                agendaUid={agendaUid}\n                widget={widget}\n                {...widget}\n              />\n            </span>\n          </Portal>\n        );\n      default:\n        return null;\n    }\n  });\n\n  return (\n    <>\n      <Filters\n        withRef\n        filters={filters}\n        getOptions={getOptions}\n        getTotal={getTotal}\n        initialViewport={initialAggregations.viewport}\n        defaultViewport={defaultViewport}\n        getQuery={getQuery}\n        loadGeoData={loadGeoData}\n        agendaUid={agendaUid}\n        missingValue={filtersOptions.missingValue}\n        // filters\n        choiceComponent={choiceComponent}\n        dateRangeComponent={dateRangeComponent}\n        simpleDateRangeComponent={simpleDateRangeComponent}\n        definedRangeComponent={definedRangeComponent}\n        numberRangeComponent={numberRangeComponent}\n        searchComponent={searchComponent}\n        mapComponent={mapComponent}\n        customComponent={customComponent}\n        favoritesComponent={favoritesComponent}\n        timelineComponent={timelineComponent}\n        {...rest}\n      />\n      {widgetElems}\n    </>\n  );\n});\n\nconst Wrapper = forwardRef(function Wrapper(props, ref) {\n  const queryClient = useConstant(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            refetchOnWindowFocus: false,\n          },\n        },\n      }),\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <FiltersManager ref={ref} {...props} />\n    </QueryClientProvider>\n  );\n});\n\nexport default Wrapper;\n"],"mappings":"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","names":["FiltersManager","Wrapper"]}