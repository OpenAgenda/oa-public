{"version":3,"sources":["../src/components/filters/DateRangeFilter.js"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport { Field, useField } from 'react-final-form';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { parseISO, endOfDay, isSameDay } from 'date-fns';\nimport { utcToZonedTime, getTimezoneOffset } from 'date-fns-tz';\nimport DateRangePicker from '../fields/DateRangePicker.js';\nimport Title from '../Title.js';\nimport Panel from '../Panel.js';\nimport FilterPreviewer from '../FilterPreviewer.js';\n\nconst messages = defineMessages({\n  dateRange: {\n    id: 'ReactFilters.DateRangeFilter.dateRange',\n    defaultMessage: 'From {startDate} to {endDate}',\n  },\n  startDate: {\n    id: 'ReactFilters.DateRangeFilter.startDate',\n    defaultMessage: 'Start',\n  },\n  endDate: {\n    id: 'ReactFilters.DateRangeFilter.endDate',\n    defaultMessage: 'End',\n  },\n  until: {\n    id: 'ReactFilters.DateRangeFilter.until',\n    defaultMessage: 'Until {date}',\n  },\n  from: {\n    id: 'ReactFilters.DateRangeFilter.from',\n    defaultMessage: 'From {date}',\n  },\n});\n\nconst subscription = { value: true };\n\nfunction formatDateValue(value) {\n  if (!value || value === '') {\n    return null;\n  }\n\n  return typeof value === 'string' ? parseISO(value) : value;\n}\n\n// For display (store -> form)\nexport function formatValue(value) {\n  if (value === undefined) {\n    return [\n      {\n        startDate: null,\n        endDate: null,\n        key: 'selection',\n      },\n    ];\n  }\n\n  const currentTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const tzDiff = getTimezoneOffset(value.tz, value.gte)\n    - getTimezoneOffset(currentTz, value.gte);\n\n  if (Array.isArray(value)) {\n    return value.map((v) => {\n      const startDate = formatDateValue(v.gte);\n      const endDate = formatDateValue(v.lte);\n\n      return {\n        ...v,\n        startDate:\n          tzDiff && startDate ? utcToZonedTime(startDate, v.tz) : startDate,\n        endDate: tzDiff && endDate ? utcToZonedTime(endDate, v.tz) : endDate,\n      };\n    });\n  }\n\n  if (typeof value === 'object') {\n    const startDate = formatDateValue(value.gte);\n    const endDate = formatDateValue(value.lte);\n\n    return [\n      {\n        startDate:\n          tzDiff && startDate ? utcToZonedTime(startDate, value.tz) : startDate,\n        endDate:\n          tzDiff && endDate ? utcToZonedTime(endDate, value.tz) : endDate,\n        key: 'selection',\n      },\n    ];\n  }\n\n  return value;\n}\n\n// For save (form -> store)\nfunction parseValue(value) {\n  if (!value) {\n    return value;\n  }\n\n  const [selection] = value;\n\n  if (selection.startDate === null && selection.endDate === null) {\n    return undefined;\n  }\n\n  const gte = selection.startDate?.toISOString() ?? null;\n  const lte = (\n    selection.endDate ? endOfDay(selection.endDate) : selection.endDate\n  ).toISOString();\n\n  const result = {};\n  if (gte) result.gte = gte;\n  if (lte) result.lte = lte;\n\n  result.tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  return result;\n}\n\nexport function Preview({\n  name,\n  staticRanges = [],\n  component = FilterPreviewer,\n  disabled,\n  ...rest\n}) {\n  const intl = useIntl();\n  const { input } = useField(name, { subscription });\n  const { tz } = input.value;\n  const value = formatValue(input.value)[0];\n\n  const selectedStaticRange = useMemo(\n    () => value && staticRanges.find((v) => v.isSelected(value, tz)),\n    [value, staticRanges, tz],\n  );\n\n  const singleDay = useMemo(\n    () =>\n      value?.startDate\n      && value?.endDate\n      && isSameDay(value.startDate, value.endDate),\n    [value],\n  );\n\n  const onRemove = useCallback(\n    (e) => {\n      e.stopPropagation();\n\n      if (disabled) {\n        return;\n      }\n\n      input.onChange(undefined);\n    },\n    [input, disabled],\n  );\n\n  let label;\n\n  if (!value?.startDate && !value?.endDate) {\n    return null;\n  }\n\n  const formatDate = (v) => intl.formatDate(v /* , { timeZone: tz } */);\n\n  if (selectedStaticRange) {\n    label = selectedStaticRange.label;\n  } else if (value.startDate === null) {\n    label = intl.formatMessage(messages.until, {\n      date: formatDate(value.endDate),\n    });\n  } else if (value.endDate === null) {\n    label = intl.formatMessage(messages.from, {\n      date: formatDate(value.startDate),\n    });\n  } else {\n    label = singleDay\n      ? formatDate(value.startDate)\n      : intl.formatMessage(messages.dateRange, {\n        startDate: formatDate(value.startDate),\n        endDate: formatDate(value.endDate),\n      });\n  }\n\n  return React.createElement(component, {\n    name,\n    staticRanges,\n    label,\n    onRemove,\n    disabled,\n    ...rest,\n  });\n}\n\nconst DateRangeFilter = React.forwardRef(function DateRangeFilter(\n  {\n    name,\n    staticRanges,\n    inputRanges,\n    rangeColor,\n    className,\n    dateFormatStyle,\n    dateFormat,\n    minDate,\n    maxDate,\n    shownDate,\n    getQuery,\n  },\n  ref,\n) {\n  const intl = useIntl();\n\n  return (\n    <Field\n      ref={ref}\n      name={name}\n      subscription={subscription}\n      parse={parseValue}\n      format={formatValue}\n      component={DateRangePicker}\n      staticRanges={staticRanges}\n      inputRanges={inputRanges}\n      startDatePlaceholder={intl.formatMessage(messages.startDate)}\n      endDatePlaceholder={intl.formatMessage(messages.endDate)}\n      rangeColor={rangeColor}\n      className={className}\n      dateFormatStyle={dateFormatStyle}\n      dateFormat={dateFormat}\n      minDate={minDate}\n      maxDate={maxDate}\n      shownDate={shownDate}\n      getQuery={getQuery}\n    />\n  );\n});\n\nconst Collapsable = React.forwardRef(function Collapsable(\n  { name, filter, component, disabled, staticRanges, inputRanges, ...rest },\n  ref,\n) {\n  const [collapsed, setCollapsed] = useState(true);\n\n  return (\n    <Panel\n      header={(\n        <Title\n          name={name}\n          filter={filter}\n          component={Preview}\n          staticRanges={staticRanges}\n          disabled={disabled}\n        />\n      )}\n      collapsed={collapsed}\n      setCollapsed={setCollapsed}\n    >\n      <DateRangeFilter\n        ref={ref}\n        name={name}\n        filter={filter}\n        component={component}\n        staticRanges={staticRanges}\n        inputRanges={inputRanges}\n        disabled={disabled}\n        collapsed={collapsed}\n        {...rest}\n      />\n    </Panel>\n  );\n});\n\nconst exported = React.memo(DateRangeFilter);\n\n// React.memo lose statics\nexported.Preview = Preview;\nexported.Collapsable = Collapsable;\n\nexport default exported;\n"],"mappings":"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","names":["DateRangeFilter","Collapsable"]}