{"version":3,"sources":["../../src/utils/filtersToAggregations.js","../../src/utils/minimizeAggregation.js"],"sourcesContent":["import minimizeAggregation from './minimizeAggregation.js';\n\nexport default function filtersToAggregations(filters, base = false) {\n  const usedFilters = base\n    ? filters.filter(\n      (filter) =>\n        filter.type === 'choice' && (!filter.options || filter.missingValue),\n    )\n    : filters;\n\n  const aggregations = usedFilters\n    .map((filter) => {\n      if (filter.aggregation === null) {\n        return false;\n      }\n\n      return {\n        key: filter.name,\n        type: filter.name,\n        missing: filter.missingValue,\n        ...filter.aggregation,\n      };\n    })\n    .filter((filter) => filter?.key);\n\n  const needViewport = usedFilters.some((filter) => filter.type === 'map');\n\n  if (needViewport) {\n    aggregations.unshift({\n      key: 'viewport',\n      type: 'viewport',\n    });\n  }\n\n  return aggregations.map(minimizeAggregation);\n}\n","const shortKeys = [\n  {\n    short: 'm',\n    key: 'missing',\n  },\n  {\n    short: 's',\n    key: 'size',\n  },\n  {\n    short: 't',\n    key: 'type',\n  },\n  {\n    short: 'k',\n    key: 'key',\n  },\n  {\n    short: 'f',\n    key: 'field',\n  },\n];\n\nconst shortValues = [\n  {\n    key: 'type',\n    short: 'af',\n    value: 'additionalFields',\n  },\n];\n\nexport default function minimizeAggregation(aggregation) {\n  if (typeof aggregation === 'string') {\n    return aggregation;\n  }\n\n  return Object.keys(aggregation).reduce(\n    (carry, key) => ({\n      ...carry,\n      [shortKeys.find((shortKey) => shortKey.key === key)?.short ?? key]:\n        shortValues.find(\n          (shortValue) =>\n            shortValue.key === key && aggregation[key] === shortValue.value,\n        )?.short ?? aggregation[key],\n    }),\n    {},\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,YAAY;AAAA,EAChB;AAAA,IACE,OAAO;AAAA,IACP,KAAK;AAAA,EACP;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,KAAK;AAAA,EACP;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,KAAK;AAAA,EACP;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,KAAK;AAAA,EACP;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,KAAK;AAAA,EACP;AACF;AAEA,IAAM,cAAc;AAAA,EAClB;AAAA,IACE,KAAK;AAAA,IACL,OAAO;AAAA,IACP,OAAO;AAAA,EACT;AACF;AAEe,SAAR,oBAAqC,aAAa;AACvD,MAAI,OAAO,gBAAgB,UAAU;AACnC,WAAO;AAAA,EACT;AAEA,SAAO,OAAO,KAAK,WAAW,EAAE;AAAA,IAC9B,CAAC,OAAO,QAAK;AArCjB;AAqCqB;AAAA,QACf,GAAG;AAAA,QACH,GAAC,eAAU,KAAK,CAAC,aAAa,SAAS,QAAQ,GAAG,MAAjD,mBAAoD,UAAS,GAAG,KAC/D,iBAAY;AAAA,UACV,CAAC,eACC,WAAW,QAAQ,OAAO,YAAY,GAAG,MAAM,WAAW;AAAA,QAC9D,MAHA,mBAGG,UAAS,YAAY,GAAG;AAAA,MAC/B;AAAA;AAAA,IACA,CAAC;AAAA,EACH;AACF;;;AD7Ce,SAAR,sBAAuC,SAAS,OAAO,OAAO;AACnE,QAAM,cAAc,OAChB,QAAQ;AAAA,IACR,CAAC,WACC,OAAO,SAAS,aAAa,CAAC,OAAO,WAAW,OAAO;AAAA,EAC3D,IACE;AAEJ,QAAM,eAAe,YAClB,IAAI,CAAC,WAAW;AACf,QAAI,OAAO,gBAAgB,MAAM;AAC/B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,MACL,KAAK,OAAO;AAAA,MACZ,MAAM,OAAO;AAAA,MACb,SAAS,OAAO;AAAA,MAChB,GAAG,OAAO;AAAA,IACZ;AAAA,EACF,CAAC,EACA,OAAO,CAAC,WAAW,iCAAQ,GAAG;AAEjC,QAAM,eAAe,YAAY,KAAK,CAAC,WAAW,OAAO,SAAS,KAAK;AAEvE,MAAI,cAAc;AAChB,iBAAa,QAAQ;AAAA,MACnB,KAAK;AAAA,MACL,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,SAAO,aAAa,IAAI,mBAAmB;AAC7C;","names":[]}