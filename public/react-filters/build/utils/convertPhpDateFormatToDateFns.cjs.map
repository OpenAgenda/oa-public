{"version":3,"sources":["../../src/utils/convertPhpDateFormatToDateFns.js"],"sourcesContent":["export default function convertPhpDateFormatToDateFns(phpFormat) {\n  const formatMapping = {\n    // Days\n    d: 'dd', // Day of the month, 2 digits with leading zeros (01 to 31)\n    D: 'EEE', // A textual representation of a day (Mon through Sun)\n    j: 'd', // Day of the month without leading zeros (1 to 31)\n    l: 'EEEE', // A full textual representation of the day of the week (Sunday through Saturday)\n    N: 'i', // ISO-8601 numeric representation of the day of the week (1 for Monday through 7 for Sunday)\n    S: 'o', // English ordinal suffix for the day of the month, 2 characters (st, nd, rd or th)\n    w: 'e', // Numeric representation of the day of the week (0 for Sunday through 6 for Saturday)\n    z: 'D', // The day of the year (starting from 0) (0 through 365)\n\n    // Weeks\n    W: 'I', // ISO-8601 week number of year, weeks starting on Monday\n\n    // Months\n    F: 'MMMM', // A full textual representation of a month (January through December)\n    m: 'MM', // Numeric representation of a month, with leading zeros (01 to 12)\n    M: 'MMM', // A short textual representation of a month (Jan through Dec)\n    n: 'M', // Numeric representation of a month, without leading zeros (1 to 12)\n    t: '', // Number of days in the given month (28 through 31) (no direct equivalent in date-fns)\n\n    // Years\n    L: '', // Whether it's a leap year (1 if it is a leap year, 0 otherwise) (no direct equivalent in date-fns)\n    o: 'RRRR', // ISO-8601 week-numbering year (4 digits)\n    Y: 'yyyy', // A full numeric representation of a year, 4 digits\n    y: 'yy', // A two digit representation of a year\n\n    // Time\n    a: 'aaa', // Lowercase Ante meridiem and Post meridiem (am or pm)\n    A: 'a', // Uppercase Ante meridiem and Post meridiem (AM or PM)\n    B: '', // Swatch Internet time (000 through 999) (no direct equivalent in date-fns)\n    g: 'h', // 12-hour format of an hour without leading zeros (1 through 12)\n    G: 'H', // 24-hour format of an hour without leading zeros (0 through 23)\n    h: 'hh', // 12-hour format of an hour with leading zeros (01 through 12)\n    H: 'HH', // 24-hour format of an hour with leading zeros (00 through 23)\n    i: 'mm', // Minutes with leading zeros (00 to 59)\n    s: 'ss', // Seconds with leading zeros (00 through 59)\n    u: 'SSS', // Microseconds (added as milliseconds in date-fns)\n\n    // Timezone\n    e: 'zzz', // Timezone identifier (e.g., America/Los_Angeles) (not directly supported, use zzz for generic support)\n    T: 'zz', // Timezone abbreviation (e.g., MST)\n    Z: 'X', // Timezone offset in seconds (e.g., -43200 to 43200)\n  };\n\n  let dateFnsFormat = '';\n  let inLiteral = false;\n\n  for (let i = 0; i < phpFormat.length; i++) {\n    const char = phpFormat[i];\n\n    if (char === '\\\\') {\n      if (!inLiteral) {\n        dateFnsFormat += \"'\";\n        inLiteral = true;\n      }\n      i += 1; // Skip the backslash\n      dateFnsFormat += phpFormat[i] || '';\n      continue;\n    }\n\n    if (inLiteral) {\n      dateFnsFormat += \"'\";\n      inLiteral = false;\n    }\n\n    if (formatMapping[char] !== undefined) {\n      dateFnsFormat += formatMapping[char];\n    } else {\n      dateFnsFormat += char;\n    }\n  }\n\n  if (inLiteral) {\n    dateFnsFormat += \"'\";\n  }\n\n  return dateFnsFormat;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAe,SAAR,8BAA+C,WAAW;AAC/D,QAAM,gBAAgB;AAAA;AAAA,IAEpgBAAgB;AACpB,MAAI,YAAY;AAEhB,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,UAAM,OAAO,UAAU,CAAC;AAExB,QAAI,SAAS,MAAM;AACjB,UAAI,CAAC,WAAW;AACd,yBAAiB;AACjB,oBAAY;AAAA,MACd;AACA,WAAK;AACL,uBAAiB,UAAU,CAAC,KAAK;AACjC;AAAA,IACF;AAEA,QAAI,WAAW;AACb,uBAAiB;AACjB,kBAAY;AAAA,IACd;AAEA,QAAI,cAAc,IAAI,MAAM,QAAW;AACrC,uBAAiB,cAAc,IAAI;AAAA,IACrC,OAAO;AACL,uBAAiB;AAAA,IACnB;AAAA,EACF;AAEA,MAAI,WAAW;AACb,qBAAiB;AAAA,EACnB;AAEA,SAAO;AACT;","names":[]}