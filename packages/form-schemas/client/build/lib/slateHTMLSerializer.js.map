{"version":3,"file":"slateHTMLSerializer.js","names":["getPlainText","node","text","children","map","join","plainTextFromHtml","htmlString","_doc$body","doc","DOMParser","parseFromString","body","textContent","deserialize","type","serialize","nodes","Array","isArray","length","concat"],"sources":["../../src/lib/slateHTMLSerializer.js"],"sourcesContent":["/**\n * Exemple: convertir un nœud slate en simple texte.\n * (Dans un vrai cas, gérez blocs, inlines, marks, etc.)\n */\nfunction getPlainText(node) {\n  if (!node) return '';\n  if (node.text) {\n    return node.text;\n  }\n  if (node.children) {\n    return node.children.map(getPlainText).join('');\n  }\n  return '';\n}\n\n/**\n * Exemple: extraire simplement du texte d’un HTML (hors balises).\n * Dans la vraie vie, vous pourriez vouloir récupérer la structure,\n * les balises, etc.\n */\nfunction plainTextFromHtml(htmlString) {\n  const doc = new DOMParser().parseFromString(htmlString, 'text/html');\n  return doc.body?.textContent || '';\n}\n\n/**\n * Transforme une string HTML en array of Slate nodes.\n */\nfunction deserialize(htmlString) {\n  // Écrivez ici votre logique de parsing HTML -> Slate Nodes\n  // Par exemple avec DOMParser, ou un package de votre choix.\n  // Le résultat final doit être un array de nœuds \"Slate\".\n  //\n  // Dans la version minimaliste ci-dessous, on renvoie juste\n  //   [{ type: 'paragraph', children: [{ text: '...' }] }]\n  // comme exemple.\n  //\n  // À vous d’adapter selon vos besoins réels.\n\n  if (!htmlString || typeof htmlString !== 'string') {\n    return [\n      {\n        type: 'paragraph',\n        children: [{ text: '' }],\n      },\n    ];\n  }\n\n  // EXEMPLE DÉMO : renvoyer tout le HTML sous forme d’un seul paragraphe\n  return [\n    {\n      type: 'paragraph',\n      children: [{ text: plainTextFromHtml(htmlString) }],\n    },\n  ];\n}\n\n/**\n * Transforme un array of Slate nodes en string HTML.\n */\nfunction serialize(nodes) {\n  // Écrivez ici la logique \"Slate Nodes\" -> HTML\n  // Minimalement, on va concaténer les textes trouvés.\n  // Dans la pratique, vous gérerez <h2>, <p>, <ul>, etc.\n\n  if (!Array.isArray(nodes) || nodes.length === 0) {\n    return '';\n  }\n\n  // EXEMPLE DÉMO : on récupère tout le texte et on l’entoure de <p>...</p>.\n  const text = nodes.map((node) => getPlainText(node)).join('\\n');\n  return `<p>${text}</p>`;\n}\n\nexport default {\n  serialize,\n  deserialize,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,IAAI,EAAE;EAC1B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,CAACC,IAAI,EAAE;IACb,OAAOD,IAAI,CAACC,IAAI;EAClB;EACA,IAAID,IAAI,CAACE,QAAQ,EAAE;IACjB,OAAOF,IAAI,CAACE,QAAQ,CAACC,GAAG,CAACJ,YAAY,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC;EACjD;EACA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,UAAU,EAAE;EAAA,IAAAC,SAAA;EACrC,MAAMC,GAAG,GAAG,IAAIC,SAAS,CAAC,CAAC,CAACC,eAAe,CAACJ,UAAU,EAAE,WAAW,CAAC;EACpE,OAAO,EAAAC,SAAA,GAAAC,GAAG,CAACG,IAAI,cAAAJ,SAAA,uBAARA,SAAA,CAAUK,WAAW,KAAI,EAAE;AACpC;;AAEA;AACA;AACA;AACA,SAASC,WAAWA,CAACP,UAAU,EAAE;EAC/B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAI,CAACA,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IACjD,OAAO,CACL;MACEQ,IAAI,EAAE,WAAW;MACjBZ,QAAQ,EAAE,CAAC;QAAED,IAAI,EAAE;MAAG,CAAC;IACzB,CAAC,CACF;EACH;;EAEA;EACA,OAAO,CACL;IACEa,IAAI,EAAE,WAAW;IACjBZ,QAAQ,EAAE,CAAC;MAAED,IAAI,EAAEI,iBAAiB,CAACC,UAAU;IAAE,CAAC;EACpD,CAAC,CACF;AACH;;AAEA;AACA;AACA;AACA,SAASS,SAASA,CAACC,KAAK,EAAE;EACxB;EACA;EACA;;EAEA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IAC/C,OAAO,EAAE;EACX;;EAEA;EACA,MAAMlB,IAAI,GAAGe,KAAK,CAACb,GAAG,CAAEH,IAAI,IAAKD,YAAY,CAACC,IAAI,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;EAC/D,aAAAgB,MAAA,CAAanB,IAAI;AACnB;AAEA,eAAe;EACbc,SAAS;EACTF;AACF,CAAC","ignoreList":[]}