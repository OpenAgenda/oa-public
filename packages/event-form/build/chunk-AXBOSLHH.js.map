{"version":3,"sources":["../src/utils/schemaLanguages.js"],"sourcesContent":["import _ from 'lodash';\nimport ih from 'immutability-helper';\nimport validator from '../validators/languages.js';\n\nfunction getFromSchemaAndValues(\n  schema,\n  interfaceLanguage,\n  valueLanguages = [],\n) {\n  const validatorOptions = _.first(schema.fields.filter((f) => f.field === 'languages')) || {};\n\n  // if no default languages are set, interface language plays that role\n  const validate = validator(\n    validatorOptions.default\n      ? validatorOptions\n      : _.assign({}, validatorOptions, { default: [interfaceLanguage] }),\n  );\n\n  return validate(valueLanguages);\n}\n\nfunction setSchemaLanguages(\n  schema,\n  interfaceLanguage = null,\n  valueLanguages = [],\n) {\n  const languages = getFromSchemaAndValues(\n    schema,\n    interfaceLanguage,\n    valueLanguages,\n  );\n\n  const update = schema.fields.reduce(\n    (result, field, index) =>\n      (field.languages\n        ? _.set(result, `fields.${index}`, { languages: { $set: languages } })\n        : result),\n    {},\n  );\n\n  return ih(schema, update);\n}\n\nexport default {\n  set: setSchemaLanguages,\n  getFromSchemaAndValues,\n};\n"],"mappings":";;;;;AAAA,OAAO,OAAO;AACd,OAAO,QAAQ;AAGf,SAAS,uBACP,QACA,mBACA,iBAAiB,CAAC,GAClB;AACA,QAAM,mBAAmB,EAAE,MAAM,OAAO,OAAO,OAAO,CAAC,MAAM,EAAE,UAAU,WAAW,CAAC,KAAK,CAAC;AAG3F,QAAM,WAAW;AAAA,IACf,iBAAiB,UACb,mBACA,EAAE,OAAO,CAAC,GAAG,kBAAkB,EAAE,SAAS,CAAC,iBAAiB,EAAE,CAAC;AAAA,EACrE;AAEA,SAAO,SAAS,cAAc;AAChC;AAEA,SAAS,mBACP,QACA,oBAAoB,MACpB,iBAAiB,CAAC,GAClB;AACA,QAAM,YAAY;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,SAAS,OAAO,OAAO;AAAA,IAC3B,CAAC,QAAQ,OAAO,UACb,MAAM,YACH,EAAE,IAAI,QAAQ,UAAU,KAAK,IAAI,EAAE,WAAW,EAAE,MAAM,UAAU,EAAE,CAAC,IACnE;AAAA,IACN,CAAC;AAAA,EACH;AAEA,SAAO,GAAG,QAAQ,MAAM;AAC1B;AAEA,IAAO,0BAAQ;AAAA,EACb,KAAK;AAAA,EACL;AACF;","names":[]}