{"version":3,"sources":["../src/schema.js"],"sourcesContent":["import { produce } from 'immer';\nimport eventFormLabels from '@openagenda/labels/event/form.js';\nimport merge from '@openagenda/form-schemas/client/build/iso/merge.js';\nimport schemaLanguages from './utils/schemaLanguages.js';\nimport injectValidators from './utils/injectValidators.js';\nimport eventFields from './fields/event.js';\n\nfunction _fillInTheBlanks(labels, defaultLang = 'en') {\n  return produce(labels, (draft) => {\n    Object.keys(draft).forEach((field) => {\n      Object.keys(draft[field]).forEach((lang) => {\n        if (!draft[field][lang].length) {\n          draft[field][lang] = draft[field][defaultLang];\n        }\n      });\n    });\n    return draft;\n  });\n}\n\nconst labels = _fillInTheBlanks(eventFormLabels);\n\nexport default (options = {}) => {\n  const {\n    includeEventFields,\n    interfaceLanguage,\n    languages,\n    schemaExtensions,\n    excludeNonDataFields,\n    access,\n  } = {\n    includeEventFields: true,\n    access: {\n      read: 'public',\n      write: 'public',\n    },\n    ...options,\n  };\n\n  const eventSchema = {\n    fields: [],\n    type: 'event',\n  };\n\n  injectValidators(eventSchema);\n\n  eventSchema.fields = eventFields({\n    labels,\n  });\n\n  const hasExtensions = Array.isArray(schemaExtensions);\n\n  // here, for generating the form, provided access as write should suffice\n  const finalSchema = merge(\n    ...[eventSchema]\n      .concat(hasExtensions ? schemaExtensions : [])\n      .concat({ access }),\n  );\n\n  if (hasExtensions && !includeEventFields) {\n    const eventSchemaFields = eventSchema.fields.map((f) => f.field);\n    finalSchema.fields = finalSchema.fields.filter(\n      (f) => !eventSchemaFields.includes(f.field),\n    );\n  }\n\n  if (excludeNonDataFields) {\n    finalSchema.fields = finalSchema.fields.filter(\n      (f) => f.field !== 'languages',\n    );\n  }\n\n  return schemaLanguages.set(finalSchema, interfaceLanguage, languages);\n};\n\nexport { eventFields };\n"],"mappings":";;;;;;;;;;;AAAA,SAAS,eAAe;AACxB,OAAO,qBAAqB;AAC5B,OAAO,WAAW;AAKlB,SAAS,iBAAiBA,SAAQ,cAAc,MAAM;AACpD,SAAO,QAAQA,SAAQ,CAAC,UAAU;AAChC,WAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,UAAU;AACpC,aAAO,KAAK,MAAM,KAAK,CAAC,EAAE,QAAQ,CAAC,SAAS;AAC1C,YAAI,CAAC,MAAM,KAAK,EAAE,IAAI,EAAE,QAAQ;AAC9B,gBAAM,KAAK,EAAE,IAAI,IAAI,MAAM,KAAK,EAAE,WAAW;AAAA,QAC/C;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,WAAO;AAAA,EACT,CAAC;AACH;AAEA,IAAM,SAAS,iBAAiB,eAAe;AAE/C,IAAO,iBAAQ,CAAC,UAAU,CAAC,MAAM;AAC/B,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAAA,IACF,oBAAoB;AAAA,IACpB,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,IACA,GAAG;AAAA,EACL;AAEA,QAAM,cAAc;AAAA,IAClB,QAAQ,CAAC;AAAA,IACT,MAAM;AAAA,EACR;AAEA,2BAAiB,WAAW;AAE5B,cAAY,SAAS,cAAY;AAAA,IAC/B;AAAA,EACF,CAAC;AAED,QAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AAGpD,QAAM,cAAc;AAAA,IAClB,GAAG,CAAC,WAAW,EACZ,OAAO,gBAAgB,mBAAmB,CAAC,CAAC,EAC5C,OAAO,EAAE,OAAO,CAAC;AAAA,EACtB;AAEA,MAAI,iBAAiB,CAAC,oBAAoB;AACxC,UAAM,oBAAoB,YAAY,OAAO,IAAI,CAAC,MAAM,EAAE,KAAK;AAC/D,gBAAY,SAAS,YAAY,OAAO;AAAA,MACtC,CAAC,MAAM,CAAC,kBAAkB,SAAS,EAAE,KAAK;AAAA,IAC5C;AAAA,EACF;AAEA,MAAI,sBAAsB;AACxB,gBAAY,SAAS,YAAY,OAAO;AAAA,MACtC,CAAC,MAAM,EAAE,UAAU;AAAA,IACrB;AAAA,EACF;AAEA,SAAO,wBAAgB,IAAI,aAAa,mBAAmB,SAAS;AACtE;","names":["labels"]}