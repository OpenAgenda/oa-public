{"version":3,"sources":["../src/index.js"],"sourcesContent":["import _ from 'lodash';\nimport ih from 'immutability-helper';\nimport { Component } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport commonLocales from '@openagenda/common-labels';\nimport { getSupportedLocale, mergeLocales } from '@openagenda/intl';\n\nimport FormSchemaComponent from '@openagenda/form-schemas/client/build/index.js';\n\nimport errorLabels from '@openagenda/labels/event/errors.js';\nimport Registration from '@openagenda/registration-apps';\nimport * as locales from './locales-compiled/index.js';\nimport appendFormConfigurations from './utils/appendFormConfigurations.js';\nimport extractLanguages from './utils/extractLanguages.js';\nimport getMultilingualFieldNames from './utils/getMultilingualFieldNames.js';\nimport identifyLanguageChanges from './utils/identifyLanguageChanges.js';\nimport transferMultilingualValues from './utils/transferMultilingualValues.js';\nimport removeMultilingualValues from './utils/removeMultilingualValues.js';\nimport schemaLanguages from './utils/schemaLanguages.js';\nimport injectValidators from './utils/injectValidators.js';\nimport updateLanguages from './utils/updateLanguages.js';\nimport validators from './validators/index.js';\n\nimport Age from './components/Age.js';\nimport Keywords from './components/Keywords.js';\nimport Timings from './components/Timings.js';\nimport Location from './components/Location.js';\nimport Languages from './components/Languages.js';\nimport Accessibility from './components/Accessibility.js';\nimport Events from './components/Events/index.js';\nimport ConfigurableTextarea from './components/ConfigurableTextarea.js';\nimport eventSchema from './schema.js';\n\nconst eventFormComponents = {\n  age: Age,\n  registration: Registration,\n  keywords: Keywords,\n  timings: Timings,\n  location: Location,\n  languages: Languages,\n  accessibility: Accessibility,\n  events: Events,\n  longDescription: ConfigurableTextarea,\n};\n\nclass EventForm extends Component {\n  constructor(props) {\n    super(props);\n\n    const { values: propsValues } = this.props;\n\n    this.onChange = this.onChange.bind(this);\n\n    const languages = extractLanguages(props.schema, propsValues, {\n      defaultLanguage: props.lang,\n    });\n\n    const { schema, hash } = this.buildEventSchema(languages, props);\n\n    const values = ih(props.values ?? {}, {\n      languages: {\n        $set: languages, // schemaLanguages.getFromSchemaAndValues(schema, props.lang, languages)\n      },\n    });\n\n    this.state = {\n      values,\n      schema,\n      hash,\n      files: [],\n      loading: false,\n    };\n  }\n\n  onChange({ values, errors, files, loading, globalError }) {\n    const { lang, devOnChange } = this.props;\n    const { values: stateValues } = this.state;\n\n    const languageChanges = identifyLanguageChanges(\n      _.get(this.state, 'values.languages'), // before\n      _.get(values, 'languages'), // now\n    );\n\n    const update = _.omitBy(\n      {\n        errors,\n        globalError,\n        files,\n        loading,\n      },\n      _.isUndefined,\n    );\n\n    if (values) update.values = values;\n\n    const multilingualFieldNames = getMultilingualFieldNames(\n      eventSchema({ languages: true }),\n    );\n\n    // if a unique language has been switcheds, content should not be lost\n    if (languageChanges.swapped.length) {\n      update.values = ih(\n        transferMultilingualValues(\n          stateValues,\n          multilingualFieldNames,\n          _.get(this, 'state.values.languages.0'),\n          _.first(languageChanges.swapped),\n        ),\n        {\n          languages: {\n            $set: [languageChanges.swapped[0]],\n          },\n        },\n      );\n    } else if (languageChanges.removed.length) {\n      update.values = ih(\n        removeMultilingualValues(\n          stateValues,\n          multilingualFieldNames,\n          languageChanges.removed,\n        ),\n        {\n          languages: {\n            $set: stateValues.languages.filter(\n              (l) => !languageChanges.removed.includes(l),\n            ),\n          },\n        },\n      );\n    }\n\n    if (languageChanges.has) {\n      _.assign(update, this.buildEventSchema(_.get(values, 'languages')));\n\n      update.values.languages = schemaLanguages.getFromSchemaAndValues(\n        update.schema,\n        lang,\n        update.values.languages,\n      );\n    }\n\n    if (devOnChange) devOnChange(update);\n\n    return this.setState(update);\n  }\n\n  buildEventSchema(languages, props = null) {\n    const p = props || this.props;\n\n    const { schema: propsSchema } = this.props;\n\n    const schema = propsSchema\n      || eventSchema({\n        includeEventFields: p.includeEventFields,\n        interfaceLanguage: p.lang,\n        suggestionsRes: p.suggestionsRes,\n        languages,\n        schemaExtensions: p.schemaExtensions,\n        access: {\n          write: p.role,\n        },\n      });\n\n    appendFormConfigurations(schema, {\n      locationRes: p.locationRes,\n      tiles: p.tiles,\n      fileStore: p.fileStore,\n    });\n\n    injectValidators(schema);\n\n    updateLanguages(schema, languages);\n\n    return {\n      schema,\n      hash: JSON.stringify(languages), // only language changes may trigger schema changes\n    };\n  }\n\n  render() {\n    const {\n      lang,\n      actionComponents,\n      onSubmitSuccess,\n      classNames,\n      role,\n      maxFileSize,\n      res,\n    } = this.props;\n\n    const { values, schema, hash, errors, globalError, loading, files } = this.state;\n\n    return (\n      <IntlProvider\n        key={lang}\n        locale={lang}\n        messages={mergeLocales(commonLocales, locales)[lang]}\n        defaultLocale={getSupportedLocale(lang)}\n      >\n        <FormSchemaComponent\n          res={res ? { post: res } : undefined}\n          method=\"post\"\n          role={role}\n          stateless\n          maxFileSize={maxFileSize}\n          lang={lang}\n          components={eventFormComponents}\n          values={values}\n          errors={errors}\n          globalError={globalError}\n          loading={loading}\n          files={files}\n          onChange={this.onChange}\n          schema={schema}\n          hash={hash}\n          classNames={ih(classNames ?? {}, {\n            field: { $set: 'padding-v-sm form-group' },\n          })}\n          actionComponents={actionComponents}\n          onSubmitSuccess={onSubmitSuccess}\n          labels={{\n            errors: errorLabels,\n          }}\n        />\n      </IntlProvider>\n    );\n  }\n}\n\nexport default EventForm;\n\nexport { validators };\n"],"mappings":"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","names":[]}