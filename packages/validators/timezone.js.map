{"version":3,"file":"timezone.js","names":["_omit","_interopRequireDefault","require","_text","_params","_errors","_listify","timezoneRegex","timezone","config","arguments","length","undefined","params","cleanParams","error","code","message","validateText","textValidator","omit","validate","value","_context","clean","textErrors","map","e","_objectSpread2","default","replace","_includes","call","test","errors","type","field","list","listify","module","exports"],"sources":["src/timezone.js"],"sourcesContent":["import omit from 'lodash/omit';\nimport textValidator from './text';\nimport cleanParams from './lib/params';\nimport errors from './lib/errors';\n\nimport listify from './listify';\n\nconst timezoneRegex = /^[A-Z][a-zA-Z_]+\\/[A-Z][A-Za-z_/]+$/;\n\nexport default function timezone(config = {}) {\n  const params = cleanParams('timezone', config, {\n    error: {\n      code: 'timezone.invalid',\n      message: 'value is not a Continent/City timezone',\n    },\n  });\n\n  const validateText = textValidator(omit(params, ['list']));\n\n  const validate = (value) => {\n    let clean;\n\n    try {\n      clean = validateText(value);\n    } catch (textErrors) {\n      throw textErrors.map((e) => ({\n        ...e,\n        code: e.code.replace('text', 'timezone'),\n        message: e.message.replace('text', 'timezone'),\n      }));\n    }\n\n    if ([undefined, null].includes(clean)) {\n      return clean;\n    }\n\n    if (!timezoneRegex.test(value)) {\n      throw errors(\n        params,\n        value,\n        'timezone.invalid',\n        'must be in Continent/City format (e.g., Europe/Paris, America/New_York)',\n      );\n    }\n    return clean;\n  };\n  validate.type = 'integer';\n  validate.field = params.field;\n\n  return params.list ? listify(validate, params) : validate;\n}\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,OAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,OAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAEA,IAAAI,QAAA,GAAAL,sBAAA,CAAAC,OAAA;AAEA,MAAMK,aAAa,GAAG,qCAAqC;AAE5C,SAASC,QAAQA,CAAA,EAAc;EAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC1C,MAAMG,MAAM,GAAG,IAAAC,eAAW,EAAC,UAAU,EAAEL,MAAM,EAAE;IAC7CM,KAAK,EAAE;MACLC,IAAI,EAAE,kBAAkB;MACxBC,OAAO,EAAE;IACX;EACF,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAG,IAAAC,aAAa,EAAC,IAAAC,aAAI,EAACP,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;EAE1D,MAAMQ,QAAQ,GAAIC,KAAK,IAAK;IAAA,IAAAC,QAAA;IAC1B,IAAIC,KAAK;IAET,IAAI;MACFA,KAAK,GAAGN,YAAY,CAACI,KAAK,CAAC;IAC7B,CAAC,CAAC,OAAOG,UAAU,EAAE;MACnB,MAAMA,UAAU,CAACC,GAAG,CAAEC,CAAC,QAAAC,cAAA,CAAAC,OAAA,MAAAD,cAAA,CAAAC,OAAA,MAClBF,CAAC;QACJX,IAAI,EAAEW,CAAC,CAACX,IAAI,CAACc,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC;QACxCb,OAAO,EAAEU,CAAC,CAACV,OAAO,CAACa,OAAO,CAAC,MAAM,EAAE,UAAU;MAAC,EAC9C,CAAC;IACL;IAEA,IAAI,IAAAC,SAAA,CAAAF,OAAA,EAAAN,QAAA,IAACX,SAAS,EAAE,IAAI,CAAC,EAAAoB,IAAA,CAAAT,QAAA,EAAUC,KAAK,CAAC,EAAE;MACrC,OAAOA,KAAK;IACd;IAEA,IAAI,CAACjB,aAAa,CAAC0B,IAAI,CAACX,KAAK,CAAC,EAAE;MAC9B,MAAM,IAAAY,eAAM,EACVrB,MAAM,EACNS,KAAK,EACL,kBAAkB,EAClB,yEACF,CAAC;IACH;IACA,OAAOE,KAAK;EACd,CAAC;EACDH,QAAQ,CAACc,IAAI,GAAG,SAAS;EACzBd,QAAQ,CAACe,KAAK,GAAGvB,MAAM,CAACuB,KAAK;EAE7B,OAAOvB,MAAM,CAACwB,IAAI,GAAG,IAAAC,gBAAO,EAACjB,QAAQ,EAAER,MAAM,CAAC,GAAGQ,QAAQ;AAC3D;AAACkB,MAAA,CAAAC,OAAA,GAAAA,OAAA,CAAAX,OAAA","ignoreList":[]}